-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. 3Sum
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
이중 포인터, sort() 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
그냥 sort()가 안되는 이유: javascript는 sort()사용 시 숫자를 "1" 같은 문자열로 보기때문에 -1보다 -4가 더 크다고 인식한다. 
		       따라서 sort((a,b)=>a-b))의 형태로 정렬해야한다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. nums 배열 인덱스를 하나씩 올리며 고정 인덱스를 정한다.
2. 만약 nums[i-1]과 nums[i]가 같다면 다음 인덱스로 넘어간다.
3. 아니라면 start 인덱스를 (i+1) 
	  end 인덱스를 (배열의 크기-1) 로 정해준다.
4. start가 end보다 커지면 i인덱스를 다음 인덱스로 넘어간다.
5. 그게 아니라면 nums[start]의 값과 nums[end]의 합이 -(고정 인덱스)보다 클때 ,작을때 ,같을때로 나누어준다
6. 만약 (합) == (-고정인덱스) 라면 sample배열에 i,start,end 값순으로 푸쉬해주고 중복을 피하기 위해 start값과 end 값이 달라질때 까지 start++, end--를 해준다.
	   >                     라면 합을 줄여야 하니 end--를 해준다.
                 <	            라면 합을 늘려야 하니 start++를 해준다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
